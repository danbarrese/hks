#!/bin/bash

# This script executes actions based on the -a input string.
# Actions can be limited by window title regex with the -w option.
#
# Example: hks -w terminal -a foo
# Example: hks -w *eclipse* -a bar
#
# Author: Dan Barrese
# Log: 2013-07-06: Created.
# Log: 2013-08-20: Melded 3 script into this 1 script.
# Log: 2013-08-24: Added copy and paste operations.
# Log: 2014.02.21: Added support for gnome-terminal and backspace input.
# Log: 2014.02.21: Removed dependency on wmctrl.  Script will use it if available.
# Log: 2014.02.21: Removed dependency on xdotool.

###############################################################################
# User Configuration:
hksdir=~/"hks"
term=konsole # Options: konsole, gnome-terminal
###############################################################################

# help
if [[ $# == 0 || $1 == "-help" || $1 == "-h" || $1 == "help" ]]; then
    echo "HKS - Hot Key Sequences"
    echo "-a app     Opens a dialog to open applications."
    echo "-a copy    Opens a dialog to copy clipboard text into non-volatile register."
    echo "-a file    Opens a dialog to open files."
    echo "-a paste   Opens a dialog to paste clipboard text from non-volatile register."
    echo "-a win     Opens a dialog to manipulate windows."
    echo "-a zzz     Uses sh to execute a script in 'hks/misc/' named zzz."
    echo ""
    echo "'-w *' and '-a paste' operations require xdotool."
    exit
fi


# require
type stty >/dev/null 2>&1 || { echo >&2 "stty is required."; exit 1; }
type dd >/dev/null 2>&1 || { echo >&2 "dd is required."; exit 1; }

mykey="${hksdir}/.mykey"
this=${0##*/}
type xdotool >/dev/null 2>&1
if [[ $? == 0 ]]; then
    hasxdotool=true
else
    hasxdotool=false
fi

# Verify terminal exists and is supported by this script.
type ${term} >/dev/null 2>&1 || { echo >&2 "${term} is required."; exit 1; }
case ${term} in
    konsole|gnome-terminal)
        ;;
    *)
        printf '%s\n' "${term} not supported."
        exit 1
        ;;
esac

###############################################################################
# mykeyget
keygetvar="mykeyget"
if [[ $1 == ${keygetvar} ]]; then
    sleep_time=0.1
    while [ ! -e "${mykey}" ]; do
        sleep ${sleep_time}
    done
    mykeyget=$(cat "${mykey}")
    rm -f "${mykey}"
    echo ${mykeyget}
    exit
fi
###############################################################################

###############################################################################
# mykeyset
keysetvar="mykeyset"
if [[ $1 == ${keysetvar} ]]; then
    if [[ $# < 2 ]]; then
        exit
    fi
    dir=$2

    # size and move window
    if type wmctrl >/dev/null 2>&1; then
        sleep 0.01
        wmctrl -r ${this}_${dir} -e "0,0,0,300,700"
        wmctrl -a ${this}_${dir}
        sleep 0.05 # Wait long enough for window to resize before we start writing text to it.
    fi

    shopt -s nullglob
    files=(${hksdir}/$dir/*)
    if [ ${#files[@]} -gt 0 ]; then
        # get max length of all filenames
        max=1
        for f in ${hksdir}/$dir/*; do
            thislen=$(expr length ${f##*/})
            if [[ $thislen > $max ]]; then
                max=$thislen
            fi
        done

        # list all options
        printf '%s\n' "Press <space> to cancel."
        cd "${hksdir}/$dir"
        for f in "${hksdir}/$dir/"*; do
            if [[ "${dir}" == "copy" || "${dir}" == "paste" ]]; then
                printf '%s\n' "${f##*/}"
            else
                printf '%s' "${f##*/}"
                thislen=$(expr length ${f##*/})
                for (( i=1; i<=$((${max}-${thislen}+2)); i++)); do
                    printf '%s' " "
                done
                if [ -e "${hksdir}/${dir}/.${f##*/}" ]; then
                    printf '%s\n' "$(cat ${hksdir}/${dir}/.${f##*/})"
                else
                    printf '%s\n' "$(cat ${f})"
                fi
            fi
        done
    fi

    # get keys until a match is found
    old_tty_setting=$(stty -g)
    stty -icanon -echo
    for (( i=1; i<=${max}; i++)); do
        # get key
        thisKey=$(dd bs=1 count=1 2> /dev/null)

        case ${thisKey} in
            " ") # Cancel, quit.
                allKeys="This key does not exist"
                break
                ;;
            ||\x08|\x7f) # Delete previous character.
                allKeys=${allKeys%?}
                $((i-=2))
                ;;
            *) # Combine this key with all previous keys.
                allKeys=${allKeys}${thisKey}
                ;;
        esac


        # cancel if there's a matching filename
        if [[ "X${allKeys}" != "X" ]]; then
            if [ -e "${hksdir}/${dir}/${allKeys}" ]; then
                break
            fi
        fi

        # filter options
        clear
        printf '%s\n' "Press <space> to cancel."
        for f in ${hksdir}/${dir}/*; do
            if [[ "${f##*/}" == "${allKeys}"* ]]; then
                printf '%s' "${f##*/}"
                thislen=$(expr length ${f##*/})
                for (( j=1; j<=$((${max}-${thislen}+2)); j++)); do
                    printf '%s' " "
                done
                if [ -e ${hksdir}/${dir}/.${f##*/} ]; then
                    printf '%s\n' "$(cat ${hksdir}/$dir/.${f##*/})"
                else
                    printf '%s\n' "$(cat ${f})"
                fi
            fi
        done
        printf '%s' ${allKeys}
    done

    echo ${allKeys} > "${mykey}"
    stty "${old_tty_setting}"
    exit
fi
###############################################################################

#id=$(xdotool getwindowpid $(xdotool getwindowfocus))

# release keys that may be currently depressed
if ${hasxdotool}; then
    xdotool keyup Alt_L Control_L Super_L Shift_L
fi

# Works in Fedora 18, not in CentOS 6.4
#title=$(cat /proc/$(xdotool getwindowpid $(xdotool getwindowfocus))/comm)

# get name of exe
exe=$(cat /proc/$(xdotool getwindowpid $(xdotool getwindowfocus))/status | sed -rn 's/Name:\t([a-zA-Z0-9]+)/\1/ p')

# prep vars
no_w_param=true
exe_ok=false
ran=false

while getopts "w:a:" n; do
    case ${n} in
        w)
            if ${hasxdotool}; then
                no_w_param=false
                # reset window matching if we just finished running an "-a" command
                if $ran; then
                    exe=$(cat /proc/$(xdotool getwindowpid $(xdotool getwindowfocus))/status | sed -rn 's/Name:\t([a-zA-Z0-9]+)/\1/ p')
                    exe_ok=false
                    ran=false
                fi

                # test if exe filename matches input (input may have wildcards)
                if ! ${exe_ok}; then
                    if [[ ${exe,,} == ${OPTARG,,} ]]; then
                        exe_ok=true
                    fi
                fi
            else
                printf '%s\n' "xdotool required for this operation."
                exit 1
            fi
            ;;
        a)
            if ${no_w_param} || ${exe_ok}; then
                if [ -e "${mykey}" ]; then
                    rm -f "${mykey}"
                fi
                case ${OPTARG} in
                    action)
                        if ${hasxdotool}; then
                            if [ ! -e "${hksdir}/${OPTARG}/${exe}" ]; then
                                mkdir "${hksdir}/${OPTARG}/${exe}"
                            fi
                            case ${term} in
                                konsole) ${term} -p tabtitle=${this}_${OPTARG} -e ${this} ${keysetvar} ${OPTARG}/${exe} ;;
                                gnome-terminal) ${term} --title=${this}_${OPTARG} -e "${this} ${keysetvar} ${OPTARG}${exe}" ;;
                            esac
                            key=$(${this} ${keygetvar})
                            if [ -e "${hksdir}/${OPTARG}/${exe}/${key}" ]; then
                                sh "${hksdir}/${OPTARG}/${exe}/${key}" &
                            fi
                        else
                            printf '%s\n' "xdotool required for this operation."
                            exit 1
                        fi
                        ;;
                    app|win|file)
                        case ${term} in
                            konsole) ${term} -p tabtitle=${this}_${OPTARG} -e ${this} ${keysetvar} ${OPTARG} ;;
                            gnome-terminal) ${term} --title=${this}_${OPTARG} -e "${this} ${keysetvar} ${OPTARG}" ;;
                        esac
                        key=$(${this} ${keygetvar})
                        if [ -e "${hksdir}/${OPTARG}/${key}" ]; then
                            sh "${hksdir}/${OPTARG}/${key}" &
                        fi
                        ;;
                    copy)
                        type xclip >/dev/null 2>&1 || { echo >&2 "xclip is required."; exit 1; }
                        case ${term} in
                            konsole) ${term} -p tabtitle=${this}_${OPTARG} -e ${this} ${keysetvar} ${OPTARG} ;;
                            gnome-terminal) ${term} --title=${this}_${OPTARG} -e "${this} ${keysetvar} ${OPTARG}" ;;
                        esac
                        key=$(${this} ${keygetvar})
                        if [ -e "${hksdir}/${OPTARG}/${key}" ]; then
                            xclip -selection clipboard -o -f > "${hksdir}/${OPTARG}/${key}"
                            xclip -selection clipboard -o -f > "${hksdir}/paste/${key}"
                        fi
                        ;;
                    paste)
                        type xclip >/dev/null 2>&1 || { echo >&2 "xclip is required."; exit 1; }
                        case ${term} in
                            konsole) ${term} -p tabtitle=${this}_${OPTARG} -e ${this} ${keysetvar} ${OPTARG} ;;
                            gnome-terminal) ${term} --title=${this}_${OPTARG} -e "${this} ${keysetvar} ${OPTARG}" ;;
                        esac
                        key=$(${this} ${keygetvar})
                        if [ -e "${hksdir}/${OPTARG}/${key}" ]; then
                            sleep 0.01
                            # preserve old clipboard contents
                            oldClipboardTextVal=$(xclip -selection clipboard -o -f)

                            # place file contents into clipboard
                            xclip -selection clipboard -i -f "${hksdir}/${OPTARG}/${key}"

                            # paste using Ctrl+v
                            xdotool keydown control && \
                            xdotool key v && \
                            xdotool keyup control

                            # restore clipboard
                            echo -n ${oldClipboardTextVal} | xclip -selection clipboard -f
                        fi
                        ;;
                    *)
                        sh "${hksdir}/misc/${OPTARG}" &
                        ;;
                esac
            fi
            ran=true
            ;;
    esac
done

exit
